# -*- coding: utf-8 -*-
"""
/***************************************************************************
 pymhmDialog
                                 A QGIS plugin
 Python package for mesoscale Hydrological Model
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-10-22
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Sanjeev Bashyal
        email                : sanjeev.bashyal01@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os

# QGIS and PyQt imports
from qgis.PyQt.QtWidgets import QDialog, QFileDialog
from qgis.core import (
    QgsApplication,
    QgsMapLayerProxyModel
)

# UI class from the compiled .ui file
from .ui_pymhm_dialog_base import Ui_pymhmDialog

# Import utility mixin and processors
from .utils import DialogUtils
from .morphology_processor import MorphologyProcessor


class pymhmDialog(QDialog, Ui_pymhmDialog, DialogUtils):
    def __init__(self, parent=None):
        """Constructor."""
        super(pymhmDialog, self).__init__(parent)
        self.setupUi(self)

        # --- Filter map layer combo boxes to show only relevant layer types ---
        self.mMapLayerComboBox_dem.setFilters(
            QgsMapLayerProxyModel.RasterLayer)
        self.mMapLayerComboBox_pour_points.setFilters(
            QgsMapLayerProxyModel.VectorLayer)
        
        # Set filters for new layer combo boxes (both vector and raster allowed)
        self.mMapLayerComboBox_soil.setFilters(
            QgsMapLayerProxyModel.RasterLayer | QgsMapLayerProxyModel.VectorLayer)
        self.mMapLayerComboBox_land_cover.setFilters(
            QgsMapLayerProxyModel.RasterLayer | QgsMapLayerProxyModel.VectorLayer)
        self.mMapLayerComboBox_geology.setFilters(
            QgsMapLayerProxyModel.RasterLayer | QgsMapLayerProxyModel.VectorLayer)

        # --- Instance attributes for managing file paths ---
        self.project_folder = None
        self.geometry_folder = None  # Subfolder for geometry outputs

        # --- Initialize processors ---
        self.morphology_processor = MorphologyProcessor(self)

        # --- Connect signals and slots ---
        self.connect_signals()

    def connect_signals(self):
        """Connect all UI element signals to appropriate slots."""
        # Project management
        self.pushButton_BrowseProjectFolder.clicked.connect(
            self.select_project_folder)
        self.tabWidget.currentChanged.connect(self.on_tab_changed)
        
        # Morphology/Geometry processing - delegate to processor
        self.pushButton_fillDem.clicked.connect(
            self.morphology_processor.fill_dem)
        self.pushButton_createNetwork.clicked.connect(
            self.morphology_processor.create_network)
        self.pushButton_snapPoints.clicked.connect(
            self.morphology_processor.snap_points)
        self.pushButton_delineate.clicked.connect(
            self.morphology_processor.delineate_watershed)

        # Hydrological processing - delegate to processor
        self.pushButton_aspect.clicked.connect(
            self.morphology_processor.process_aspect)
        self.pushButton_slope.clicked.connect(
            self.morphology_processor.process_slope)
        self.pushButton_flowAccumulation.clicked.connect(
            self.morphology_processor.process_flow_accumulation)
        self.pushButton_flowDirection.clicked.connect(
            self.morphology_processor.process_flow_direction)
        self.pushButton_calib_action1.clicked.connect(
            self.morphology_processor.process_gauge_position)
        
        # Layer processing - delegate to processor
        self.pushButton_landUse.clicked.connect(
            self.morphology_processor.process_land_use)
        self.pushButton_soil.clicked.connect(
            self.morphology_processor.process_soil)
        self.pushButton_hydrogeology.clicked.connect(
            self.morphology_processor.process_geology)
        
        # LAI file browser
        self.pushButton_browse_lai.clicked.connect(self.browse_lai_file)

    # --- Project Management Methods ---

    def select_project_folder(self):
        """Opens a dialog to select the project working directory."""
        folder = QFileDialog.getExistingDirectory(
            self, "Select Project Folder")
        if folder:
            self.project_folder = folder
            self.lineEdit_ProjectFolder.setText(self.project_folder)
            self.log_message(f"Project folder set to: {self.project_folder}")

            self.geometry_folder = os.path.join(
                self.project_folder, "Geometry")
            os.makedirs(self.geometry_folder, exist_ok=True)

            # Load project state in morphology processor
            self.morphology_processor.load_project_state()

    def on_tab_changed(self, index):
        """Switches the stacked widget page when the tab is changed."""
        self.stackedWidget.setCurrentIndex(index)
        self.log_message(f"Switched to '{self.tabWidget.tabText(index)}' tab.")

    # --- UI Helper Methods ---

    def browse_lai_file(self):
        """Browse for Leaf Area Index file"""
        file_path, _ = QFileDialog.getOpenFileName(
            self, "Select Leaf Area Index File", "", 
            "All Files (*);;GeoTIFF (*.tif *.tiff);;NetCDF (*.nc);;HDF5 (*.h5 *.hdf5)")
        if file_path:
            self.lineEdit_lai_file.setText(file_path)
            self.log_message(f"LAI file selected: {file_path}")
